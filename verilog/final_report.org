#+TITLE: ハードウェア実験３最終レポートA
#+AUTHOR: 21班 新藤光 1029-26-4887 
#+LATEX_CLASS: thesis
#+OPTIONS: toc:nil timestamp:nil

* 基本仕様
** 概要
今回作成したアーキテクチャの名前を以下SIMPLE-J とする。
SIMPLE-Jは16bitの命令を実行する簡単なアーキテクチャである。
** アーキテクチャ
*** 主記憶とレジスタ
主記憶とレジスタは、それぞれすべて16bit幅である。
- 主記憶
16bit幅であり、命令の格納とデータの格納・読み出しは同じ主記憶上で行う。
- レジスタ
16bit幅のレジスタt0~t7がある。
** 特徴
シングルコアであり、かつ１命令を５つのフェーズ１からフェーズ５に分け、フェーズ１とフェーズ３、フェーズ２とフェーズ５をそれぞれ並行に処理する。
** 命令セット
*** 命令形式
SIMPLE-Jの命令はすべて16ビットの固定長である。
以下に命令セットを示す。
**** 算術演算\\
レジスタRdとRsの結果の加算、減算をRdに格納する。
**** 論理演算\\
レジスタRdとRsのAnd、Or、XORの結果をRdに格納する。
**** 移動演算\\
レジスタRdにRsの値を格納する。
**** シフト演算\\
左論理シフト、左循環シフト、右論理シフト、右算術シフトの結果をRdに格納する。
**** 入出力命令\\
- OUT　レジスタRsの値を出力機器に出力する。
- HLT 動作を停止させる。
**** ロードストア命令\\
メモリに値を書き込んだり値を読みだしたりする。
**** 条件分岐命令\\
分岐条件が成り立つときPCを書きかえて分岐する。
|---------+--------+-------+--------+------|
| 15   14 | 13  11 | 10  8 | 7    4 | 3  0 |
|---------+--------+-------+--------+------|
|      11 | Rs     | Rd    | op3    | d    |
|---------+--------+-------+--------+------|

|-----------+------+-----------------------|
| mnemonic  |  op3 | function              |
|-----------+------+-----------------------|
|-----------+------+-----------------------|
| ADD Rd,Rs | 0000 | r[Rd] = r[Rd] + r[Rs] |
|-----------+------+-----------------------|
| SUB Rd,Rs | 0001 | r[Rd] = r[Rd] - r[Rs] |
|-----------+------+-----------------------|
| AND Rd,Rs | 0010 | r[Rd] = r[Rd] & r[Rs] |
|-----------+------+-----------------------|
| OR Rd,Rs  | 0011 | r[Rd] = r[Rd]  r[Rs]  |
|-----------+------+-----------------------|
| XOR Rd,Rs | 0100 | r[Rd] = r[Rd] ^ r[Rs] |
|-----------+------+-----------------------|
| CMP Rd,Rs | 0101 | r[Rd] -  r[Rs]        |
|-----------+------+-----------------------|
| MOV Rd,Rs | 0110 | r[Rd] =  r[Rs]        |
|-----------+------+-----------------------|
| SLL Rd,Rs | 1000 | r[Rd] = sll(r[Rd], d) |
|-----------+------+-----------------------|
| SLR Rd,Rs | 0011 | r[Rd] = slr(r[Rd], d) |
|-----------+------+-----------------------|
| SRL Rd,Rs | 1001 | r[Rd] = srl(r[Rd], d) |
|-----------+------+-----------------------|
| SRA Rd,Rs | 1011 | r[Rd] = sra(r[Rd], d) |
|-----------+------+-----------------------|
| OUT Rs    | 1101 | output = r[Rs]        |
|-----------+------+-----------------------|
| HLT       | 1111 | halt()                |
|-----------+------+-----------------------|


|---------+--------+-------+-----------|
| 15   14 | 13  11 | 10  8 | 7       0 |
|---------+--------+-------+-----------|
| op1     | Ra     | Rb    | d         |
|---------+--------+-------+-----------|

|----------+-----+-----------------------------|
| mnemonic | op1 | function                    |
|----------+-----+-----------------------------|
| LI Rb,d  | 000 | r[Rb] = sign_ext(d)         |
|----------+-----+-----------------------------|
| addi Rb  | 001 | r[Rb] = r[Rb] + sign_ext(d) |
|----------+-----+-----------------------------|
| subi Rb  | 010 | r[Rb] = r[Rb] + sign_ext(d) |
|----------+-----+-----------------------------|
| B Rb,d   | 100 | PC = PC + 1 + sign_ext(d)   |
|----------+-----+-----------------------------|


|-------+-------+------+-----|
| 15 14 | 13 11 | 10 8 | 7 0 |
|-------+-------+------+-----|
|    10 |   111 | cond | d   |
|-------+-------+------+-----|

|----------+------+--------------------------------------------|
| mnemonic | cond | function                                   |
|----------+------+--------------------------------------------|
| BE d     |  000 | if (Z) PC = PC + 1 + sign_ext(d)           |
|----------+------+--------------------------------------------|
| BLT d    |  001 | if (S ^ V) PC = PC + 1 + sign_ext(d)       |
|----------+------+--------------------------------------------|
| BLE d    |  010 | if (Z ∨ (S ^ V)) PC = PC + 1 + sign_ext(d)  |
|----------+------+--------------------------------------------|
| BNE d    |  011 | if (!Z) PC = PC + 1 + sign_ext(d)          |
|----------+------+--------------------------------------------|


** 基本的な設計
*** 制御回路
**** clock\\
適切な発振回路を用いてクロックを提供する。クロックの立ち上がりによって各フェーズを順に活性化する。
**** reset\\
reset信号の立ち上がりによって、回路内のすべてのDFFの値を０に初期化する。

* SIMPLEBの基本仕様からの拡張および性能評価
** 基本アーキテクチャの拡張
*** 命令の拡張 
**** 即値演算\\
即値を足したり引いたりするとき、無駄なロード命令、ストア命令を減らすことができるようになる。
**** フェーズ１とフェーズ３、フェーズ２とフェーズ５の同時実行。\\

** プロセッサの性能評価
*** ゲート数 1027/5980(17%)
*** Fmax 57.32MHz
*** クリティカルパス 
From rab:inst20|a-out3
To  ram:ram1
*** 拡張の評価
**** 並列化するにあたり必要な回路が増えたので、ゲート数は増えた。

* 分担状況
すべて自分で設計しました。
